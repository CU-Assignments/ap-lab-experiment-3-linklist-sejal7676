#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;

    Node(int value) {
        data = value;
        next = nullptr;
    }
};

void printList(Node* head) {
    Node* current = head;
    while (current != nullptr) {
        cout << current->data << " ";
        current = current->next;
    }
    cout << endl;
}

void insertEnd(Node*& head, int value) {
    Node* newNode = new Node(value);
    if (head == nullptr) {
        head = newNode;
    } else {
        Node* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

Node* mergeLists(Node* list1, Node* list2) {
    // Create a new dummy node to help with the merging
    Node* dummy = new Node(0);
    Node* current = dummy;
    
    while (list1 != nullptr && list2 != nullptr) {
        if (list1->data < list2->data) {
            current->next = list1;
            list1 = list1->next;
        } else {
            current->next = list2;
            list2 = list2->next;
        }
        current = current->next;
    }
    
    if (list1 != nullptr) {
        current->next = list1;
    } else {
        current->next = list2;
    }
    
    // Return the merged list (skip the dummy node)
    return dummy->next;
}

int main() {
    Node* list1 = nullptr;
    Node* list2 = nullptr;

    insertEnd(list1, 1);
    insertEnd(list1, 3);
    insertEnd(list1, 5);
    insertEnd(list1, 7);

    insertEnd(list2, 2);
    insertEnd(list2, 4);
    insertEnd(list2, 6);
    insertEnd(list2, 8);

    Node* mergedList = mergeLists(list1, list2);

    cout << "Merged Linked List: ";
    printList(mergedList);

    return 0;
}
